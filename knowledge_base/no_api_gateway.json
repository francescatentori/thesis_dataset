{
  "smell_name": "no api gateway",
  "brief_description": "this smell pops up when external apps call each microservice directly, instead of going through a single, unified entry point. Clients end up juggling service addresses, authentication, and routing themselvesâ€”exactly the kind of cross-cutting logic an API gateway should centralize.",
  "microservices_context": [
    "clients must know and call each service endpoint, boosting their complexity.",
    "tightly couples client code to internal service layout.",
    "spreads security, rate-limiting, logging, and other policies across all services.",
    "harder to evolve or secure your system when every client does discovery and auth itself."
  ],
  "manifestations": [
    {
      "artifact_type": "client",
      "language": "Java",
      "negative_example": "public class Client {\n    public void fetchData() {\n        // Directly calling service endpoints without a gateway\n        RestTemplate restTemplate = new RestTemplate();\n        List<Product> products = restTemplate.getForObject(\n            \"http://product-service:8080/products\", List.class);\n        List<Order> orders = restTemplate.getForObject(\n            \"http://order-service:8081/orders\", List.class);\n    }\n}",
      "explanation": "The client directly invokes each microservice by its URL. Without an API gateway, every service endpoint must be managed separately, duplicating concerns like authentication and versioning, and hindering scalability."
    },
    {
      "artifact_type": "client",
      "language": "Kotlin",
      "negative_example": "suspend fun fetchData(client: HttpClient) {\n    // Calling services directly without a gateway\n    val products: List<Product> = client.get(\"http://product-service:8080/products\")\n    val orders: List<Order> = client.get(\"http://order-service:8081/orders\")\n}",
      "explanation": "This Kotlin code contacts each microservice endpoint directly. In a well-designed system, a gateway or service discovery mechanism would centralize calls, but here each service must be addressed individually."
    },
    {
      "artifact_type": "client",
      "language": "Scala",
      "negative_example": "import scalaj.http.Http\n\nval route = path(\"orders\") {\n  get {\n    complete(orderService.fetchAll())\n  }\n}",
      "explanation": "The code explicitly builds HTTP requests to each microservice. Bypassing a gateway means the client must know service URLs, reducing flexibility (e.g., on scaling or migrations)."
    },
    {
      "artifact_type": "client",
      "language": "Go",
      "negative_example": "func fetchData() {\n    // Directly calling microservice URLs\n    resp1, _ := http.Get(\"http://product-service:8080/products\")\n    resp2, _ := http.Get(\"http://order-service:8081/orders\")\n    defer resp1.Body.Close()\n    defer resp2.Body.Close()\n}",
      "explanation": "The Go function requests each service by its fixed address. Without a gateway or discovery, these calls assume static URLs, so any address change breaks the client."
    },
    {
      "artifact_type": "controller",
      "language": "Java",
      "negative_example": "@RestController\npublic class OrderController {\n    @GetMapping(\"/orders\")\n    public List<Order> getOrders() {\n        // logic here\n    }\n}",
      "explanation": "This microservice controller exposes its endpoint directly. Without an API gateway, each such endpoint is public, forcing clients to call them individually and potentially bypassing cross-cutting policies."
    },
    {
      "artifact_type": "controller",
      "language": "Kotlin",
      "negative_example": "@RestController\nclass CustomerController {\n    @GetMapping(\"/customers\")\n    fun getCustomers(): List<Customer> {\n        // logic\n    }\n}",
      "explanation": "The service defines a controller with a public API path. In isolation, each microservice offering endpoints means clients must discover and call each one. An API gateway could abstract these paths behind a single URL space."
    },
    {
      "artifact_type": "routing",
      "language": "Scala",
      "negative_example": "val route = path(\"orders\") {\n  get {\n    complete(orderService.fetchAll())\n  }\n}",
      "explanation": "This Scala Akka-HTTP route exposes an orders endpoint. Each route in individual services adds an open API. With no gateway, the routing of requests is decentralized and scattered across services."
    },
    {
      "artifact_type": "handler",
      "language": "Go",
      "negative_example": "func main() {\n    http.HandleFunc(\"/payments\", handlePayments)\n    log.Fatal(http.ListenAndServe(\":8082\", nil))\n}",
      "explanation": "In this Go service, the /payments endpoint is registered directly on port 8082. Each service stands alone. Without a gateway or proxy, the client needs the service's port and path, rather than going through a unified interface."
    },
    {
      "artifact_type": "security filter",
      "language": "Java",
      "negative_example": "@Component\npublic class JwtFilter extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain chain) {\n        // Perform JWT authentication\n    }\n}",
      "explanation": "This filter enforces authentication. In a no-gateway scenario, each service must implement its own security filter like this, duplicating security logic across services instead of centralizing it in an API gateway."
    },
    {
      "artifact_type": "security filter",
      "language": "Kotlin",
      "negative_example": "@Component\nclass JwtAuthFilter : OncePerRequestFilter() {\n    override fun doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, chain: FilterChain) {\n        // Perform token validation\n    }\n}",
      "explanation": "Like the Java example, this Kotlin filter handles authentication. With no centralized gateway, each service must protect itself, leading to repetitive code and potential inconsistencies."
    },
    { 
      "artifact_type": "deployment",
      "language": "YAML",
      "negative_example": "services:\n  api-gateway:\n    image: my-gateway\n    ports:\n      - \"8080:8080\"\n\n  order-service:\n    image: my-orders\n    ports:\n      - \"8081:8080\"  # <-- VULNERABILITY\n\n  product-service:\n    image: my-products\n    ports:\n      - \"8082:8080\"  # <-- VULNERABILITY",
      "explanation": "This is the 'Bypassable Gateway' variant of the smell. Although an 'api-gateway' service exists, other services ('order-service', 'product-service') also expose their ports directly. This allows clients to bypass the gateway, defeating its purpose and reintroducing the problems of direct access."
    }
  ],
  "positive": [
    {
      "artifact_type": "configuration",
      "language": "Java",
      "positive_example": "@Bean\n@LoadBalanced\npublic RestTemplate restTemplate() {\n    return new RestTemplate();\n}",
      "explanation": "Registering a load-balanced RestTemplate allows service calls by name (using discovery) instead of fixed endpoints. This means clients use logical service addresses (e.g., http://order-service) and the underlying system handles load balancing, supporting scalability."
    },
    {
      "artifact_type": "gateway",
      "language": "Java",
      "positive_example": "@SpringBootApplication\n@EnableZuulProxy\npublic class ApiGatewayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ApiGatewayApplication.class, args);\n    }\n}",
      "explanation": "This is a Spring Boot API gateway using Netflix Zuul. All client requests can go through this gateway, which routes to underlying services (not shown). This centralizes authentication, logging, and other concerns, avoiding the 'no gateway' smell."
    },
    {
      "artifact_type": "gateway",
      "language": "Java",
      "positive_example": "@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n    return builder.routes()\n        .route(\"order-service\", r -> r.path(\"/orders/**\")\n            .uri(\"lb://order-service\"))\n        .build();\n}",
      "explanation": "This Spring Cloud Gateway configuration sets up a route using the logical service name 'order-service'. The gateway uses load-balanced addresses (lb://) so new instances are automatically included, and clients only use the gateway paths."
    },
    {
      "artifact_type": "client",
      "language": "Kotlin",
      "positive_example": "@FeignClient(\"order-service\")\ninterface OrderClient {\n    @GetMapping(\"/orders\")\n    fun getOrders(): List<Order>\n}",
      "explanation": "Using a Feign client, the code refers to 'order-service' by name. The service discovery mechanism resolves the actual endpoint. This abstracts direct URLs and leverages a centralized registry or gateway."
    },
    {
      "artifact_type": "producer",
      "language": "Scala",
      "positive_example": "producer.send(new ProducerRecord<>(\"order-requests\", new GetAllOrdersEvent()))",
      "explanation": "This Scala code publishes a request event to a message broker (Kafka). Services subscribe to topics instead of direct HTTP calls. Using an asynchronous message-oriented approach decouples services and avoids direct endpoint coupling."
    },
    {
      "artifact_type": "client",
      "language": "Go",
      "positive_example": "func fetchData() {\n    // Use service URL from environment variable or service discovery\n    ordersURL := os.Getenv(\"ORDER_SERVICE_URL\")\n    resp, err := http.Get(fmt.Sprintf(\"%s/orders\", ordersURL))\n    defer resp.Body.Close()\n}",
      "explanation": "Instead of hardcoding an address, the service URL is obtained from an environment variable (or discovery service). This allows dynamic resolution of service endpoints, as seen in containerized or orchestrated environments."
    },
    {
      "artifact_type": "client",
      "language": "Go",
      "positive_example": "conn, err := grpc.Dial(\"order-service:50051\", grpc.WithInsecure())\norderClient := pb.NewOrderServiceClient(conn)\nres, err := orderClient.GetOrders(context.Background(), &pb.Empty{})",
      "explanation": "Using gRPC with a service name (order-service) allows resolution via DNS or service registry. The client code does not hardcode IP addresses, and any number of instances of order-service can serve the request."
    },
    {
      "artifact_type": "configuration",
      "language": "YAML",
      "positive_example": "spring:\n  cloud:\n    gateway:\n      routes:\n        - id: order-service\n          uri: lb://order-service\n          predicates:\n            - Path=/orders/**\n        - id: product-service\n          uri: lb://product-service\n          predicates:\n            - Path=/products/**",
      "explanation": "This Spring Cloud Gateway config in YAML defines routes for services with 'lb://' URIs. It uses logical names 'order-service' and 'product-service'. The gateway will distribute requests across instances of each service and present a unified API to clients."
    },
    {
      "artifact_type": "client",
      "language": "Java",
      "positive_example": "@FeignClient(\"product-service\")\npublic interface ProductClient {\n    @GetMapping(\"/products\")\n    List<Product> getProducts();\n}",
      "explanation": "Here a Java Feign client calls 'product-service' by name. At runtime, service discovery and load-balancing mechanisms (e.g., Netflix Eureka + Ribbon) ensure the request reaches an appropriate instance. Clients do not manage raw endpoints."
    },
    {
      "artifact_type": "configuration",
      "language": "YAML",
      "positive_example": "spring:\n  cloud:\n    gateway:\n      routes:\n        - id: order-service\n          uri: lb://order-service\n          predicates:\n            - Path=/orders/**\n        - id: product-service\n          uri: lb://product-service\n          predicates:\n            - Path=/products/**",
      "explanation": "This Spring Cloud Gateway config in YAML defines routes for services with 'lb://' URIs. It uses logical names 'order-service' and 'product-service'. The gateway will distribute requests across instances of each service and present a unified API to clients."
    },
    {
      "artifact_type": "deployment",
      "language": "YAML",
      "positive_example": "services:\n  api-gateway:\n    image: my-gateway\n    ports:\n      - \"8080:8080\" # <-- CORRECT\n\n  order-service:\n    image: my-orders\n    # No 'ports' section, so it is not exposed.\n\n  product-service:\n    image: my-products\n    # No 'ports' section.",
      "explanation": "This is a correct deployment configuration that enforces the API Gateway pattern. Only the gateway service exposes a port to the outside world. All other services are internal and can only be reached through the gateway, ensuring that all cross-cutting concerns are applied uniformly."
    }
],
  "meta_data": {
    "tags": ["api-gateway", "routing", "security", "client-coupling", "cross-cutting-concerns"],
    "remediation_difficulty": "High",
    "impact": "high"
  }
}