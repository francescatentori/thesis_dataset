{
  "smell_name": "wobbly service interaction",
  "brief_description": "this smell shows up when Service A calls Service B but doesn’t protect itself against B’s failure or slowness. If B hiccups, A also collapses or hangs—triggering cascading errors and breaking the isolation you want in microservices.",
  "microservices_context": [
    "a glitch in one service cascades into others, risking a domino-effect failure.",
    "violates failure isolation—the cornerstone of resilient microservice design.",
    "drags down overall availability when a local issue spreads.",
    "no timeouts, retries, circuit breakers or fallbacks mean the caller just waits or fails hard."
  ],
  "manifestations": [ 
    {
      "artifact_type": "service",
      "language": "Java",
      "negative_example": "```java\npublic class OrderService {\n    public Order getOrder(int id) {\n        // No timeout or circuit breaker used here\n        RestTemplate rest = new RestTemplate();\n        return rest.getForObject(\"http://inventory-service/items/\" + id, Order.class);\n    }\n}\n```",
      "explanation": "OrderService calls InventoryService synchronously with RestTemplate but no timeout or fallback. If InventoryService hangs or fails, OrderService will also hang."
    },
    {
      "artifact_type": "service",
      "language": "Java",
      "negative_example": "```java\nMono<Customer> mono = WebClient.create()\n    .get().uri(\"http://customer-service/customer/1\")\n    .retrieve().bodyToMono(Customer.class);\nCustomer customer = mono.block();\n```",
      "explanation": "Blocking on a WebClient call with no timeout or error handling. A slow or failing CustomerService will block this code indefinitely."
    },
    {
      "artifact_type": "service",
      "language": "Kotlin",
      "negative_example": "```kotlin\nclass UserService {\n    suspend fun getUser(id: Long): User {\n        // No timeout or error handling\n        return HttpClient().get(\"http://user-service/users/$id\")\n    }\n}\n```",
      "explanation": "The coroutine call to UserService has no timeout or fallback. If UserService is down, this call will block indefinitely."
    },
    {
      "artifact_type": "service",
      "language": "Kotlin",
      "negative_example": "```kotlin\nrunBlocking {\n    val httpClient = HttpClient()\n    val response = httpClient.get<HttpResponse>(\"http://other-service/api\")\n    // Using blocking code inside coroutine without timeout\n}\n```",
          "explanation": "Blocking network call inside `runBlocking` with no timeout. This will hang the coroutine if the remote service does not respond."
    },
    {
      "artifact_type": "service",
      "language": "Scala",
      "negative_example": "```scala\nimplicit val timeout: Timeout = Timeout(Duration.Inf)\nval future = serviceA ? RequestData\nval result = Await.result(future, Duration.Inf)\n```",
      "explanation": "Using `Await.result` with an infinite timeout for an actor call. This will block forever if `serviceA` does not respond."
    },
    {
      "artifact_type": "service",
      "language": "Scala",
      "negative_example": "```scala\nval responseFuture = Http().singleRequest(HttpRequest(uri = \"http://service/api\"))\nresponseFuture.onComplete {\n  case Success(res) => handle(res)\n  case Failure(_) => // no action or recovery\n}\n```",
      "explanation": "An HTTP call is made without any retry or fallback logic. Failures are ignored, so callers have no contingency if the call fails."
    },
    {
      "artifact_type": "service",
      "language": "Go",
      "negative_example": "```go\nresp, err := http.Get(\"http://auth-service/validate\")\nif err != nil {\n    return err\n}\n```",
      "explanation": "Using `http.Get` (default client) with no timeout. If `auth-service` is slow or unreachable, this request can hang indefinitely."
    },
    {
      "artifact_type": "service",
      "language": "Go",
      "negative_example": "```go\nfunc (s *UserService) GetUser(id int) (*User, error) {\n    // No timeout on gRPC call\n    ctx := context.Background()\n    return s.client.GetUser(ctx, &pb.UserRequest{Id: int32(id)})\n}\n```",
      "explanation": "A gRPC call is made with a background context (no deadline). A slow user-service will stall indefinitely."
    },
    {
      "artifact_type": "service",
      "language": "Kotlin",
      "negative_example": "```kotlin\nfun fetchData(id: String): String {\n    // Blocking call with no exception or timeout handling\n    return URL(\"http://data-service/data/$id\").readText()\n}\n```",
      "explanation": "Simple blocking I/O call to another service. No timeout or circuit breaker; the call will block if the service is unresponsive."
    },
    {
      "artifact_type": "service",
      "language": "Java",
      "negative_example": "```java\ntry {\n    String data = new RestTemplate().getForObject(\"http://data-service/data\", String.class);\n    return data;\n} catch (Exception e) {\n    return null; // Swallowing the failure silently\n}\n```",
      "explanation": "The service swallows exceptions and returns null as fallback. No retry or alternate path. This can lead to hidden failures and null propagation."
    }
  ],
  "positive": [
    {
      "artifact_type": "circuit_breaker",
      "language": "Java",
      "positive_example": "```java\nCircuitBreaker cb = CircuitBreaker.ofDefaults(\"inventoryCB\");\nSupplier<Item> decorated = CircuitBreaker.decorateSupplier(cb, () -> inventoryService.getItem(id));\nItem item = Try.ofSupplier(decorated)\n               .recover(throwable -> getDefaultItem())\n               .get();\n```",
      "explanation": "InventoryService calls are wrapped in a circuit breaker (Resilience4j). On failure, it falls back to `getDefaultItem()` instead of hanging."
    },
    {
      "artifact_type": "timeout",
      "language": "Java",
      "positive_example": "```java\nRestTemplate rest = new RestTemplate();\n((SimpleClientHttpRequestFactory) rest.getRequestFactory()).setConnectTimeout(1000);\n((SimpleClientHttpRequestFactory) rest.getRequestFactory()).setReadTimeout(1000);\nString response = rest.getForObject(\"http://inventory-service/items/\" + id, String.class);\n```",
      "explanation": "Configured a short connect and read timeout for HTTP calls. The client will fail fast if InventoryService is slow or down."
    },
    {
      "artifact_type": "timeout",
      "language": "Kotlin",
      "positive_example": "```kotlin\nrunBlocking {\n    withTimeout(2000) {\n        val response = httpClient.get<String>(\"http://service/api\")\n        // use response\n    }\n}\n```",
      "explanation": "Uses `withTimeout` to enforce a 2-second timeout on the service call. If the call takes longer, it is aborted with an exception."
    },
    {
      "artifact_type": "circuit_breaker",
      "language": "Kotlin",
      "positive_example": "```kotlin\nval circuitBreaker = CircuitBreaker.ofDefaults(\"serviceCB\")\nval supplier = CircuitBreaker.decorateSupplier(circuitBreaker) { callService() }\nval result = Try.ofSupplier(supplier)\n    .recover { fallbackData() }\n    .get()\n```",
      "explanation": "Wraps service call in a circuit breaker (via Resilience4j). On repeated failures it opens the circuit and uses a fallback value."
    },
    {
      "artifact_type": "timeout",
      "language": "Scala",
      "positive_example": "```scala\nimplicit val timeout: Timeout = Timeout(5.seconds)\nval future = serviceActor ? RequestData\nval result = Await.result(future, 5.seconds)\n```",
      "explanation": "Sets a 5-second timeout for the actor ask call. The call will fail after 5 seconds if no response, avoiding infinite blocking."
    },
    {
      "artifact_type": "circuit_breaker",
      "language": "Scala",
      "positive_example": "```scala\nval breaker = new CircuitBreaker(system.scheduler, maxFailures = 5, callTimeout = 10.seconds, resetTimeout = 1.minute)\nbreaker.withCircuitBreaker(Future { Service.callExternalApi() })\n```",
      "explanation": "Akka CircuitBreaker is used. After 5 failed calls or 10s timeouts, the circuit opens and further calls fail fast, preventing cascade."
    },
    {
      "artifact_type": "timeout",
      "language": "Go",
      "positive_example": "```go\nctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\ndefer cancel()\nresp, err := client.DoRequest(ctx, req)\n```",
      "explanation": "Creates a context with a 2-second timeout for the request. If the remote service does not respond, the context cancels the request."
    },
    {
      "artifact_type": "circuit_breaker",
      "language": "Go",
      "positive_example": "```go\ncbConfig := hystrix.CommandConfig{Timeout: 1000}\nhystrix.ConfigureCommand(\"svcCall\", cbConfig)\nhystrix.Go(\"svcCall\", func() error {\n    _, err := client.DoRequest()\n    return err\n}, func(err error) error {\n    // fallback logic\n    return nil\n})\n```",
      "explanation": "Uses a Hystrix-like circuit breaker in Go. On timeout or failures, it falls back instead of blocking."
    },
    {
      "artifact_type": "timeout",
      "language": "Java",
      "positive_example": "```java\nCompletableFuture.supplyAsync(() -> restTemplate.getForObject(url, String.class))\n    .orTimeout(500, TimeUnit.MILLISECONDS)\n    .exceptionally(ex -> \"fallback\");\n```",
      "explanation": "Uses `CompletableFuture.orTimeout` to timeout the HTTP call after 500ms and return a fallback value."
  },
    {
      "artifact_type": "fallback",
      "language": "Scala",
      "positive_example": "```scala\nval future = (customerService ? RequestData).mapTo[Customer]\nval withRecovery = future.recover { case _ => defaultCustomer }\n```",
      "explanation": "Uses Future.recover in Scala to provide a default value if the asynchronous call fails, preventing propagation of the failure."
    }
  ],
   "meta_data": {
    "tags": ["wobbly-interaction", "error-handling", "resilience", "fault-tolerance", "cascading-failure", "timeout", "retry", "circuit-breaker", "fallback"],
    "remediation_difficulty": "High",
    "impact": "Critical"
  }
}