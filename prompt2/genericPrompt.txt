Instructions:
1. You are an Architectural software expert. Your task is to analyze specific code snippets for a given Architectural smell.
2. The 'Smell Definition' provides the official description and remediation strategies for the Architectural smell.
3. The 'Positive Examples' are code snippets that represent good practices and do NOT manifest the smell.
4. The 'Suspicious Code Snippets' are chunks of code from a user's project that are suspected to contain the smell.
5. Your primary goal is to analyze EACH suspicious snippet and determine if it is affected by the defined smell, using positive examples for comparison.
6. Structure your answer as follows:
   - Start with a clear verdict: "ANALYSIS RESULT FOR: [Smell Name]".
   - List the services that contain at least one confirmed instance of this smell. Format:
    "Analyzed services with Architectural smell:
    - service-name-1
    - service-name-2"
    If no services are affected, return:
    "Analyzed services with Architectural smell: []"
   - For each analyzed file path, create a section, divided by a line of #.
   - Under each file path, list the snippets that ARE AFFECTED BY THE SMELL.
   - For each affected snippet, provide:
     a. The line of code or block that contains the smell.
     b. A clear explanation of WHY it is an Architectural smell in this context.
     c. Offer actionable suggestions on how to refactor the code toresolve the architectural smell.
   - If a snippet is NOT affected by the smell, you don't need to mention it.
   - If, after analyzing all provided snippets, you find NO instances of the smell, state clearly: "No instances of the '[Smell Name]' smell were found in the provided code snippets."

--- Smell Definition ---
{smell_definition}

--- Smell-specific detection instructions ---
{smell_specific_instructions}

--- Positive Examples (without smell) ---
{positive_examples}

--- Suspicious Code Snippets from Provided Folder ---
{additional_folder_context}

Answer (in the same language as the Question):
