{
  "smell_name": "endpoint based service interaction",
  "brief_description": "this happens when one service reaches out to another by using a hard-coded URL (for example, a fixed IP and port) instead of looking up the endpoint dynamically. The result? Your system stays rigid, hard to scale, and brittle whenever you move or replace a service.",
  "microservices_context": [
    "you lose out on dynamic discovery and automatic scaling of services.",
    "if you spin up, move, or replace a service instance, anyone pointing at the old address will break immediately."
  ],
  "manifestations": [
    {
      "artifact_type": "configuration",
      "language": "Properties/YAML",
      "negative_example": "accounts-service.url=http://localhost:8081\ncustomers-service.url=http://localhost:8082",
      "explanation": "This configuration file hardcodes the exact host and port for downstream services. This creates tight coupling at the configuration level. If a service's location changes, this file must be manually updated, which violates the principle of dynamic service discovery."
    },
    {
      "artifact_type": "service",
      "language": "Java",
      "negative_example": "public class OrderService {\n    private RestTemplate rest = new RestTemplate();\n    public void checkInventory() {\n        // Directly calling a specific instance of Inventory service\n        Inventory inventory = rest.getForObject(\n            \"http://inventory-service:8080/inventory\", Inventory.class);\n    }\n}",
      "explanation": "OrderService calls InventoryService by a fixed URL. This binds the service call to a specific endpoint; if InventoryService scales or moves, the caller won't automatically use the new instances."
    },
    {
      "artifact_type": "configuration",
      "language": "properties",
      "negative_example": "api.gateway.endpoints[0].path=[/]*api/accounts.*\napi.gateway.endpoints[0].method=GET\napi.gateway.endpoints[0].location=http://${accounts.queryside.service.host}:8080\napi.gateway.endpoints[1].path=[/]*api/customers.*/accounts\napi.gateway.endpoints[1].method=GET\napi.gateway.endpoints[1].location=http://${accounts.queryside.service.host}:8080\napi.gateway.endpoints[2].path=[/]*api/accounts.*\napi.gateway.endpoints[2].method=POST\napi.gateway.endpoints[2].location=http://${accounts.commandside.service.host}:8080\napi.gateway.endpoints[3].path=[/]*api/customers.*\napi.gateway.endpoints[3].method=GET\napi.gateway.endpoints[3].location=http://${customers.queryside.service.host}:8080\napi.gateway.endpoints[4].path=[/]*api/customers.*\napi.gateway.endpoints[4].method=POST\napi.gateway.endpoints[4].location=http://${customers.commandside.service.host}:8080\napi.gateway.endpoints[5].path=[/]*api/transfers.*\napi.gateway.endpoints[5].method=POST\napi.gateway.endpoints[5].location=http://${transfers.commandside.service.host}:8080\napi.gateway.endpoints[6].path=[/]*api/customers.*\napi.gateway.endpoints[6].method=DELETE\napi.gateway.endpoints[6].location=http://${customers.commandside.service.host}:8080\napi.gateway.endpoints[7].path=[/]*api/accounts.*\napi.gateway.endpoints[7].method=DELETE\napi.gateway.endpoints[7].location=http://${accounts.commandside.service.host}:8080",
      "explanation": "This example illustrates the 'endpoint-based service interaction' smell, where the API Gateway configuration relies heavily on static endpoint patterns and hardcoded service hostnames. This creates tight coupling between the gateway and the underlying services, meaning any change to a path, host, or port requires manual configuration updates. It lacks abstraction and dynamic service discovery, making the system brittle and harder to evolve or maintain."
    },
    {
      "artifact_type": "service",
      "language": "Kotlin",
      "negative_example": "class PaymentService(private val client: HttpClient) {\n    suspend fun validateOrder(orderId: String) {\n        // Direct HTTP call with hardcoded address\n        client.get<OrderStatus>(\"http://order-service:8080/orders/$orderId/status\")\n    }\n}",
      "explanation": "This Kotlin code uses a hard-coded address to call OrderService. Tying to an explicit host/port bypasses any discovery or load balancing, so the call only reaches that particular instance."
    },
    {
      "artifact_type": "service",
      "language": "Scala",
      "negative_example": "class ReportService(http: HttpExt) {\n  def getUserInfo(userId: String): Future[String] = {\n    // Hardcoded service endpoint\n    http.singleRequest(HttpRequest(uri = s\"http://user-service:8080/users/$userId\"))\n      .flatMap(_.entity.toStrict(2.seconds))\n      .map(_.data.utf8String)\n  }\n}",
      "explanation": "ReportService directly requests the UserService at a fixed URI. This prevents transparent load balancing or failover: only that specific instance will be called for user info."
    },
    {
      "artifact_type": "service",
      "language": "Scala",
      "negative_example": "class BillingService(client: akka.http.scaladsl.HttpExt) {\n  def charge(userId: String): Future[HttpResponse] = {\n    // Using static host and port\n    client.singleRequest(HttpRequest(uri = \"http://billing-service:8080/charge\"))\n  }\n}",
      "explanation": "BillingService sends a request to a fixed billing-service endpoint. This static endpoint coupling makes it impossible to utilize new replicas or redirect traffic if this instance goes down."
    },
    {
      "artifact_type": "service",
      "language": "Go",
      "negative_example": "func VerifyShipping() {\n    // Direct REST call to a specific service instance\n    resp, err := http.Get(\"http://shipping-service:8080/shipments/verify\")\n    defer resp.Body.Close()\n}",
      "explanation": "The Go code issues an HTTP GET to a fixed shipping-service URL. Without service discovery, this request will always hit that single endpoint, ignoring any other instances."
    },
    {
      "artifact_type": "service",
      "language": "Go",
      "negative_example": "func FetchProfile() {\n    // Hardcoded endpoint for the profile service\n    resp, err := http.Get(\"http://user-service:8080/profile\")\n    defer resp.Body.Close()\n}",
      "explanation": "This Go client in a microservice calls the user-service at a hardcoded address. If the service replicates or moves to a different port, the call will fail or not reach the new instances."
    },
    {
      "artifact_type": "configuration",
      "language": "YAML",
      "negative_example": "services:\n  inventory-service: http://inventory-service:8080\n  order-service: http://order-service:8080",
      "explanation": "This YAML configuration uses static URLs for services. Hardcoding endpoints in config makes it difficult to scale or redeploy services without updating every dependent configuration."
    },
    {
      "artifact_type": "service",
      "language": "Java",
      "negative_example": "public class EmailService {\n    private RestTemplate rest = new RestTemplate();\n    public void notify(Order order) {\n        // Invokes user service by fixed IP and port\n        User user = rest.getForObject(\"http://192.168.1.100:8080/users/\" + order.getUserId(), User.class);\n    }\n}",
      "explanation": "The EmailService calls the User service via a hard-coded IP address and port. This is rigid and fails to adapt if the service instance changes, creating a fragile coupling."
    },
    {
      "artifact_type": "service",
      "language": "Kotlin",
      "negative_example": "class SyncService {\n    fun syncData(dataId: String) {\n        // Direct gRPC call to a single endpoint\n        val channel = ManagedChannelBuilder.forAddress(\"data-service\", 50051).usePlaintext().build()\n        val stub = DataServiceGrpc.newBlockingStub(channel)\n        stub.sync(DataRequest.newBuilder().setId(dataId).build())\n    }\n}",
      "explanation": "Here, SyncService sets up a gRPC channel to a specific data-service address. Without service lookup, it will always connect to that one target, neglecting other available replicas."
    },
    {
      "artifact_type": "service",
      "language": "Java",
      "negative_example": "public class AnalyticsService {\n    public void report() {\n        // SOAP call to fixed endpoint\n        SOAPConnection conn = SOAPConnectionFactory.newInstance().createConnection();\n        String endpoint = \"http://reporting-service:8080/soap\";\n        SOAPMessage response = conn.call(message, endpoint);\n    }\n}",
      "explanation": "The AnalyticsService uses a SOAP connection to a static URL for the reporting-service. As with REST calls, this locks the communication to a specific endpoint instance, preventing seamless scaling."
    }
  ],
  "positive": [
    {
      "artifact_type": "configuration",
      "language": "Java",
      "positive_example": "@Bean\n@LoadBalanced\npublic RestTemplate restTemplate() {\n    return new RestTemplate();\n}",
      "explanation": "This bean creates a RestTemplate that is load-balanced (e.g., via Ribbon/Eureka). When this restTemplate is used, service URLs with logical names (like http://order-service) will be automatically resolved to available instances, avoiding fixed endpoints."
    },
    {
      "artifact_type": "client",
      "language": "Java",
      "positive_example": "public class OrderService {\n    @Autowired\n    private RestTemplate restTemplate;\n    public void cancelOrder(String orderId) {\n        // Using a logical service name, not hardcoded IP\n        restTemplate.postForObject(\n            \"http://order-service:8080/orders/\" + orderId + \"/cancel\",\n            null, Void.class);\n    }\n}",
      "explanation": "Using the logical name 'order-service' with a load-balanced RestTemplate (assuming service registry) means the request will be routed to any healthy instance of OrderService, not a specific endpoint. This keeps the caller decoupled from instance locations."
    },
    {
      "artifact_type": "client",
      "language": "Kotlin",
      "positive_example": "class NotificationService(private val client: HttpClient) {\n    suspend fun sendNotification(userId: String) {\n        // Use service discovery for user service\n        val userProfile: UserProfile = client.get(\"http://user-service/users/$userId\")\n        // ...\n    }\n}",
      "explanation": "Here, the service calls 'user-service' by name. In an environment with a service registry or DNS-based discovery, 'user-service' will be resolved to the actual service instances, avoiding hard-coded addresses and ensuring scalability."
    },
    {
      "artifact_type": "service",
      "language": "Scala",
      "positive_example": "class LogService(http: HttpExt) {\n  def sendLog(event: LogEvent): Unit = {\n    // Send event instead of direct call\n    val json = event.toJson.compactPrint\n    // imagine sending to a message queue or broker\n  }\n}",
      "explanation": "In this Scala example, LogService would publish an event to a message broker (code omitted). Using an event-driven or message-based approach avoids direct service calls, eliminating endpoint coupling entirely."
    },
    {
      "artifact_type": "service",
      "language": "Java",
      "positive_example": "@Component\npublic class MetricsCollector {\n    @Autowired\n    private DiscoveryClient discoveryClient;\n    public void collect() {\n        // Query service registry for instances\n        List<ServiceInstance> instances = discoveryClient.getInstances(\"payment-service\");\n        ServiceInstance instance = instances.get(0);\n        String url = instance.getUri().toString() + \"/metrics\";\n        RestTemplate rest = new RestTemplate();\n        String data = rest.getForObject(url, String.class);\n    }\n}",
      "explanation": "Instead of calling a hard-coded endpoint, this code queries a discovery service (e.g., Eureka) to find service instances. It then constructs the URL dynamically from a chosen instance. This approach accommodates scaling and dynamic endpoints."
    },
    {
      "artifact_type": "service",
      "language": "Go",
      "positive_example": "func FetchPayment() {\n    // Using built-in DNS resolution for service name\n    resp, _ := http.Get(\"http://payment-service:8080/payments\")\n    defer resp.Body.Close()\n}",
      "explanation": "Here the Go service uses the service name 'payment-service' as the host. In a containerized setup (like Docker Swarm or Kubernetes), this hostname can automatically resolve to the correct service endpoint. No direct hard-coded address is used."
    },
    {
      "artifact_type": "service",
      "language": "Kotlin",
      "positive_example": "class OrderHandler(private val webClient: WebClient) {\n    fun process(order: Order) {\n        // Reactive client with logical service URI\n        webClient.get()\n            .uri(\"http://inventory-service/inventory/check?productId=${order.productId}\")\n            .retrieve()\n            .bodyToMono(Void::class.java)\n            .block()\n    }\n}",
      "explanation": "The code uses Spring WebClient and refers to 'inventory-service' by name. With service discovery, WebClient will route to the appropriate instance(s). The URI doesn't include explicit port, relying on cluster DNS or service registration."
    },
    {
      "artifact_type": "service",
      "language": "Java",
      "positive_example": "public class UserClient {\n    private final UserService userService;\n    public UserClient(UserService userService) {\n        this.userService = userService;\n    }\n    public void check() {\n        // Circuit breaker wraps the call (e.g., using Hystrix)\n        String status = userService.getStatus()\n            .fallback(\"SERVICE_UNAVAILABLE\");\n    }\n}",
      "explanation": "This example uses a circuit breaker pattern. While it still calls UserService, the circuit breaker (like Hystrix) handles failures. Although not a direct fix for endpoint-based coupling, it improves resilience of service interactions."
    },
    {
      "artifact_type": "configuration",
      "language": "YAML",
      "positive_example": "users:\n  host: user-service\n  port: 8080",
      "explanation": "Configuring service endpoints by name (as above) allows the underlying platform to resolve the address. Here, user-service is used instead of a static IP. This aids in redirection to new instances without code changes."
    },
    {
      "artifact_type": "service",
      "language": "Scala",
      "positive_example": "class AuthService(client: HttpClient) {\n  def login(credentials: Credentials) = {\n    // Using SRV DNS to find the service\n    val response = client.get(\"http://auth-service/auth/login\")\n    response\n  }\n}",
      "explanation": "This Scala service uses the name 'auth-service' for the URI. In many systems, SRV DNS records or service discovery resolve this to active instances of the AuthService. It avoids binding to one endpoint."
    }
  ],
  "meta_data": {
    "tags": [
        "scalability", "resilience", "performance", "coupling", "availability"],
    "remediation_difficulty": "Medium",
    "impact": "Medium"
  }
}